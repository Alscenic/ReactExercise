html
{
  --color-background-app: 255, 255, 255;
  --color-background-header: 226, 226, 226;
  --font-size-normal: 16px;
  --font-size-title: 2rem;
  --color-text-normal: 0, 0, 0;
  --app-width-tolerance: 100px;
  --app-width-desktop: 1000px;
  --theme-margin-thinner: 0.2rem;
  --theme-margin-thin: 0.4rem;
  --theme-margin: 0.8rem;
  --theme-margin-thick: 1.8rem;
  --anim-time-fast: 0.1s;
  --ease-in-general: ease-in-out;
  --ease-out-circular: cubic-bezier(0.075, 0.82, 0.165, 1);
}

@keyframes createExpand
{
  from
  {
    transform: scaleY(0.1);
  }

  to
  {
    transform: scaleY(1.0);
  }
}

/*
  I want to define everything myself, so
  let's clear some stuff in every element
*/
*
{
  box-sizing: border-box;
  margin: 0;
  border: 0;
  outline: 0;
  padding: 0;
  font-family: 'Segoe UI', 'Roboto', sans-serif;
  font-weight: normal;
}

code
{
  font-family: Consolas, 'Courier New', monospace;
}

h1
{
  font-size: 3rem;
  line-height: 1em;
  margin: 0.5em 0 0.5em 0;
}

h1:first-child
{
  margin-top: 0;
}

h1:last-child
{
  margin-bottom: 0;
}

.app-container
{
  min-height: 100vh;
  width: 100vw;
}

.app
{
  /*
    fancy rgba(var,1) trick - lets you set the opacity of a var() color
    (see color var "--color-x-y")
  */
  background: rgba(var(--color-background-app), 1);
  font-size: var(--font-size-normal);
  width: var(--app-width-desktop);
  margin: 0 auto;
  margin-top: var(--theme-margin);
}

.app-header
{
  height: 5rem;
  background: rgba(var(--color-background-header), 1);
  font-size: var(--font-size-title);
  display: flex;
  flex-direction: row;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
}

.app-logo
{
  height: 1em;
  width: 1em;
  border-radius: 50%;
  background: rgb(44, 44, 44);
}

.app-header > *
{
  margin: auto 0 auto 0.5em;
}

.focusable,
.button,
a,
.text-input
{
  transition: outline-width var(--anim-time-fast) var(--ease-in-general), outline-offset var(--anim-time-fast) var(--ease-in-general);
  outline: 0px solid rgba(var(--color-text-normal), 1);
  outline-offset: 0px;
}

a
{
  text-decoration: none;
  color: rgba(var(--color-text-normal), 1);
}

.button
{
  border: 2px solid rgba(var(--color-text-normal), 1);
  outline: 0px solid rgba(var(--color-text-normal), 1);
  outline-offset: 0px;
  cursor: pointer;
  user-select: none;
}

.focusable:focus,
.focusable:hover,
a:focus,
.button:focus,
.button:hover,
a:hover,
.text-input:focus,
.text-input:hover
{
  outline-width: var(--theme-margin-thinner);
  outline-offset: var(--theme-margin-thinner);
}

button.button
{
  padding: var(--theme-margin-thin);
  border-width: 1px;
}

.crud-user,
.create-user
{
  padding: var(--theme-margin);
  border: 1px solid rgba(var(--color-text-normal), 1);
  overflow: hidden;
  animation: createExpand 0.4s var(--ease-out-circular);
}

.create-user
{
  width: calc(50% - var(--theme-margin));
  display: flex;
}

.create-user > *
{
  font-size: 1.5rem;
  margin: auto 0;
  height: 1em;
  line-height: 1em;
}

.create-user > *:not(:first-child),
.crud-user > *:not(:first-child)
{
  margin-left: var(--theme-margin);
}

.icon-button > *
{
  font-size: 1rem;
  width: 100%;
  height: 100%;
}

.icon-button
{
  position: relative;
  width: var(--theme-margin-thick);
  height: var(--theme-margin-thick);
  text-align: center;
  display: inline-block;
  border: 2px solid rgba(var(--color-text-normal), 1);
}

.create-text
{
  flex: 1;
  display: inline-block;
  vertical-align: middle;
}

.crud-menu
{
  display: flex;
  flex-direction: column;
}

.crud-button
{
  margin: auto 0;
}

.users-container
{
  width: 100%;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  column-gap: 1.6rem;
}

.crud-user-avatar
{
  width: 2.4em;
  height: 2.4em;
}

.crud-user-avatar > img
{
  width: 100%;
  height: 100%;
}

.crud-user-data
{
  display: flex;
  flex-direction: row;
  gap: var(--theme-margin);
}

.crud-user-fields
{
  flex: 1;
}

.crud-user-name
{
  font-size: 2rem;
}

.crud-user-buttons
{
  display: flex;
  position: relative;
  flex-direction: column;
  user-select: none;
  justify-content: space-between;
  transform: translateX(200%) rotate(90deg) scale(0);
  transition: transform var(--anim-time-fast) var(--ease-in-general);
}

.crud-user-buttons.hold,
.crud-user-buttons:has(:focus),
.crud-user:hover .crud-user-buttons
{
  transform: translateX(0%) rotate(0deg) scale(1);
}

.modal-background
{
  position: fixed;
  inset: -1px;
  background: rgba(0, 0, 0, 0.6);
}

.modal
{
  display: block;
  position: fixed;
  background: rgba(var(--color-background-app), 1);
  width: calc(var(--app-width-desktop) * 0.7);
  height: calc(var(--app-width-desktop) * 0.5);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: var(--theme-margin-thick);
}

.modal > h1
{
  text-align: center;
}

.modal.new-user > *:not(:first-child)
{
  margin-top: var(--theme-margin-thick);
}

.block
{
  display: block;
}

.expand-width
{
  width: 100%;
}

.text-input
{
  border-bottom: 1px solid rgba(var(--color-text-normal), 1);
  flex: 1;
}

.modal .input-area
{
  line-height: 1em;
  position: relative;
}

.modal .input-area label
{
  background: rgba(var(--color-background-app), 1);
  z-index: 1;
  position: absolute;
  padding: 0 var(--theme-margin-thin);
  padding-top: 1em;
  top: -1em;
  transition: padding-top var(--anim-time-fast) var(--ease-in-general);
}

.text-input:focus ~ label,
.text-input:hover ~ label,
input:not(:placeholder-shown).text-input ~ label
{
  padding-top: 0em;
}

.flex
{
  display: flex;
  gap: var(--theme-margin);
}

.flex > .flex-expand
{
  flex: 1;
}
